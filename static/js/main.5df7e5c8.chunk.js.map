{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","_useState","useState","_useState2","Object","slicedToArray","vote","setVote","react_default","a","createElement","List","className","ListItemIcon","style","paddingLeft","onClick","borderColor","ListItem","ListItemText","primary","text","Divider","variant","component","JokeList","joke","setJoke","_useState3","_useState4","numJokes","_useState5","_useState6","loading","setLoading","jokeVote","sort","b","votes","useEffect","getJokes","_ref","asyncToGenerator","regenerator_default","mark","_callee","jokes","_joke","wrap","_context","prev","next","length","axios","get","headers","Accept","sent","push","id","uuid","data","window","localStorage","setItem","JSON","stringify","stop","apply","this","arguments","Paper","Typography","fontFamily","src","alt","Button","color","map","j","Joke_Joke","key","App","JokeList_JokeList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5df7e5c8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nimport './Joke.css'\r\nimport { List, Divider, Button, ListItem, ListItemText, ListItemIcon } from '@material-ui/core';\r\n\r\nexport default function Joke(props)\r\n{\r\n\r\n    const [vote, setVote] = useState(0)\r\n\r\n    const getColor = () =>\r\n    {\r\n\r\n        if (vote >= 15) { return \"green\" }\r\n        else if (vote >= 12) { return \"lightblue\" }\r\n        else if (vote >= 9) { return \"lightorange\" }\r\n        else if (vote >= 6) { return \"orange\" }\r\n        else if (vote >= 3) { return \"red\" }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <List className='joke'>\r\n            <ListItemIcon style={{ paddingLeft: '20px' }}>\r\n                <i className=\"fas fa-arrow-up\" onClick={() => setVote(vote + 1)} />\r\n                <span className='joke-votes' style={{ borderColor: getColor() }}>{vote}</span>\r\n                <i className=\"fas fa-arrow-down\" onClick={() => setVote(vote - 1)} />\r\n            </ListItemIcon>\r\n\r\n            <ListItem>\r\n                <ListItemText primary={props.text} />\r\n            </ListItem>\r\n            <Divider variant='inset' component='li' />\r\n        </List >\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport './JokeList.css'\r\nimport Joke from './Joke';\r\nimport uuid from 'uuid/v4'\r\nimport { Button, Paper, Typography } from '@material-ui/core'\r\n\r\nexport default function JokeList()\r\n{\r\n\r\n    const [joke, setJoke] = useState([])\r\n    const [numJokes, setNumJokes] = useState(10)\r\n    const [loading, setLoading] = useState(false)\r\n    let jokeVote = joke.sort((a, b) => b.votes - a.votes)\r\n\r\n\r\n\r\n    useEffect(() => { getJokes() }, [])\r\n\r\n    const getJokes = async () =>\r\n    {\r\n        let jokes = []\r\n        while (jokes.length < numJokes)\r\n        {\r\n            const joke = await axios.get('https://icanhazdadjoke.com/', {\r\n                headers: { Accept: 'application/json' }\r\n            })\r\n            jokes.push({ id: uuid(), text: joke.data.joke, votes: 0 })\r\n        }\r\n        setJoke(jokes)\r\n        setLoading(false);\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(jokes))\r\n    }\r\n    if (joke.length === 0) { getJokes() }\r\n\r\n\r\n    const handleVotes = () =>\r\n    {\r\n        setLoading(true);\r\n        getJokes();\r\n    }\r\n\r\n    if (loading)\r\n    {\r\n        return (\r\n            <div className=\"spinner\">\r\n                <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='joke-list'>\r\n            <Paper className='jokelist-sidebar'>\r\n                <h1 className=\"jokelist-title\">\r\n                    <Typography variant='h2' style={{ fontFamily: 'Rubik' }}> <b>Dad</b> Jokes </Typography>\r\n                </h1>\r\n                <img\r\n                    src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" alt=\"\" />\r\n                <Button\r\n                    className='jokelist-getmore'\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={handleVotes}\r\n                >\r\n                    New Jokes\r\n                </Button>\r\n            </Paper>\r\n\r\n\r\n            <Paper className=\"jokelist-jokes\">\r\n                {jokeVote.map(j =>\r\n                    (\r\n                        <Joke key={j.id} text={j.text} />\r\n                    ))}\r\n            </Paper>\r\n\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport JokeList from './JokeList';\r\n\r\nfunction App()\r\n{\r\n  return (\r\n    <div className=\"App\">\r\n      <JokeList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}